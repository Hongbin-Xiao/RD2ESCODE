#include <AT89X52.h>
#include <intrins.h>
#include <stdio.h>

#define R24C04ADD 0xA1
#define W24C04ADD 0xA0

sbit ADCS = P2^2;
sbit ADDI = P2^4;
sbit ADDO = P2^4;
sbit ADCLK = P2^3;

sbit SDA = P2^1;
sbit SCL = P2^0;
bit bAck;

unsigned char dispbitcode[8] = {0xf7, 0xfb, 0xfd, 0xfe, 0xef, 0xdf, 0xbf, 0x7f};
unsigned char dispcode[11] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90, 0xff};
unsigned char dispbuf[4];
unsigned int temp;
unsigned char getdata;

void delay_1ms(void)
{
    unsigned char x, y;
    x = 3;
    while (x--)
    {
        y = 40;
        while (y--);
    }
}

void display(void)
{
    char k;
    for (k = 0; k < 4; k++)
    {
        P1 = dispbitcode[k];
        P0 = dispcode[dispbuf[k]];
        if (k == 1)
            P0 &= 0x7f;
        delay_1ms();
    }
}

unsigned int Adc0832(unsigned char channel)
{
    unsigned char i = 0;
    unsigned char j;
    unsigned int dat = 0;
    unsigned char ndat = 0;

    if (channel == 0) channel = 2;
    if (channel == 1) channel = 3;
    
    ADDI = 1;
    _nop_(); _nop_();
    ADCS = 0;
    _nop_(); _nop_();
    ADCLK = 1;
    _nop_(); _nop_();
    ADCLK = 0;
    _nop_(); _nop_();
    ADCLK = 1;
    ADDI = channel & 0x1;
    _nop_(); _nop_();
    ADCLK = 0;
    _nop_(); _nop_();
    ADCLK = 1;
    ADDI = (channel >> 1) & 0x1;
    _nop_(); _nop_();
    ADCLK = 0;
    ADDI = 1;
    _nop_(); _nop_();
    
    dat = 0;
    for (i = 0; i < 8; i++)
    {
        dat |= ADDO;
        ADCLK = 1;
        _nop_(); _nop_();
        ADCLK = 0;
        _nop_(); _nop_();
        dat <<= 1;
        if (i == 7) dat |= ADDO;
    }
    
    for (i = 0; i < 8; i++)
    {
        j = 0;
        j = j | ADDO;
        ADCLK = 1;
        _nop_(); _nop_();
        ADCLK = 0;
        _nop_(); _nop_();
        j = j << 7;
        ndat = ndat | j;
        if (i < 7) ndat >>= 1;
    }
    
    ADCS = 1;
    ADCLK = 0;
    ADDO = 1;
    dat <<= 8;
    dat |= ndat;
    return (dat);
}

void StartI2C()
{
    SDA = 1;
    _nop_();
    SCL = 1;
    _nop_(); _nop_(); _nop_(); _nop_(); _nop_();
    SDA = 0;
    _nop_(); _nop_(); _nop_(); _nop_(); _nop_();
    SCL = 0;
    _nop_(); _nop_();
}

void StopI2C()
{
    SDA = 0;
    _nop_();
    SCL = 1;
    _nop_(); _nop_(); _nop_(); _nop_(); _nop_();
    SDA = 1;
    _nop_(); _nop_(); _nop_(); _nop_(); _nop_();
}

void SendByte(unsigned char c)
{
    unsigned char BitCnt;
    for (BitCnt = 0; BitCnt < 8; BitCnt++)
    {
        if ((c << BitCnt) & 0x80) SDA = 1;
        else SDA = 0;
        _nop_();
        SCL = 1;
        _nop_(); _nop_(); _nop_(); _nop_(); _nop_();
        SCL = 0;
    }
    _nop_(); _nop_();
    SDA = 1;
    _nop_(); _nop_();
    SCL = 1;
    _nop_(); _nop_(); _nop_();
    if (SDA == 1) bAck = 0;
    else bAck = 1;
    SCL = 0;
    _nop_(); _nop_();
}

unsigned char RevByte()
{
    unsigned char retc;
    unsigned char BitCnt;
    retc = 0;
    SDA = 1;
    for (BitCnt = 0; BitCnt < 8; BitCnt++)
    {
        _nop_();
        SCL = 0;
        _nop_(); _nop_(); _nop_(); _nop_(); _nop_();
        SCL = 1;
        _nop_(); _nop_();
        retc = retc << 1;
        if (SDA == 1)
            retc = retc + 1;
        _nop_(); _nop_();
    }
    SCL = 0;
    _nop_(); _nop_();
    return (retc);
}

unsigned char WIICByte(unsigned char WChipAdd, unsigned char InterAdd, unsigned char WIICData)
{
    StartI2C();
    SendByte(WChipAdd);
    if (bAck == 1)
    {
        SendByte(InterAdd);
        if (bAck == 1)
        {
            SendByte(WIICData);
            if (bAck == 1)
            {
                StopI2C();
                return (0xff);
            }
            else
            {
                return (0x03);
            }
        }
        else
        {
            return (0x02);
        }
    }
    return (0x01);
}

unsigned char RIICByte(unsigned char WChipAdd, unsigned char RChipAdd, unsigned char InterDataAdd)
{
    unsigned char TempData;
    TempData = 0;
    StartI2C();
    SendByte(WChipAdd);
    if (bAck == 1)
    {
        SendByte(InterDataAdd);
        if (bAck == 1)
        {
            StartI2C();
            SendByte(RChipAdd);
            if (bAck == 1)
            {
                TempData = RevByte();
                StopI2C();
                return (TempData);
            }
            else
            {
                return (0x03);
            }
        }
        else
        {
            return (0x02);
        }
    }
    else
    {
        return (0x01);
    }
}

void ProcessPressureData()
{
    int vary = getdata;
    float press = ((10.0 / 23.0) * vary) + 9.3;
    temp = (int)(press * 10);
    
    dispbuf[3] = temp / 1000;
    dispbuf[2] = (temp % 1000) / 100;
    dispbuf[1] = ((temp % 1000) % 100) / 10;
    dispbuf[0] = ((temp % 1000) % 100) % 10;
}

void SaveOverflowData(unsigned int OverCounter)
{
    WIICByte(W24C04ADD, 0x01, (OverCounter / 0xff));
    WIICByte(W24C04ADD, 0x02, (OverCounter % 0xff));
}

void main(void)
{
    unsigned int OverCounter = 0;
    unsigned char ptemp;
    bit OverFlg = 0;
    unsigned int ppress = 0;
    
    while (1)
    {
        getdata = Adc0832(0);
        if (14 < getdata && getdata < 243)
        {
            ProcessPressureData();
            
            if (temp != ppress)
            {
                ppress = temp;
                OverFlg = 1;
            }
            
            display();
            
            if (temp > 100)
            {
                if (OverFlg == 1)
                {
                    OverCounter++;
                    SaveOverflowData(OverCounter);
                    OverFlg = 0;
                }
            }
        }
    }
}
